'''
cat <<EOT | kubectl apply -f -
'''
---
#GITOpS Ingress Controller - Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    alb.ingress.kubernetes.io/backend-protocol: HTTPS
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:713745958112:certificate/4210d4fc-eb24-458b-b2ee-4585f0597b25
    alb.ingress.kubernetes.io/group.name: aws-load-balancer-controller
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS
    #alb.ingress.kubernetes.io/inbound-cidrs: 10.0.0.0/16, 35.80.160.129/32
    alb.ingress.kubernetes.io/inbound-cidrs: 0.0.0.0/0
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 3443}]'
    alb.ingress.kubernetes.io/manage-backend-security-group-rules: "true"
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/security-groups: sg-07b50b1828b7e5f53,sg-038defe967d41af3d,sg-05a1424bec076e55c,sg-0495853efd8389edb
    alb.ingress.kubernetes.io/success-codes: 200-399
    alb.ingress.kubernetes.io/target-type: instance
    kubernetes.io/ingress.class: alb
  finalizers:
  - group.ingress.k8s.aws/aws-load-balancer-controller
  generation: 1
  labels:
    app: gitops-nginx-ingress
  name: gitops-ingress
  namespace: gitops
spec:
  rules:
  - http:
      paths:
      - backend:
          service:
            name: gitops-ingress-controller-svc
            port:
              number: 3443
        path: /*
        pathType: ImplementationSpecific
  tls:
  - hosts:
    - optic.dev.gitops.com
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    updated-per-mf-deployment-docs-by-glg: "true"
  creationTimestamp: "2022-09-01T19:38:11Z"
  labels:
    app: gitops-ingress
  name: gitops-ingress-controller-svc
  namespace: gitops
spec:
  externalTrafficPolicy: Cluster
  internalTrafficPolicy: Cluster
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - name: https
    nodePort: 30443
    port: 3443
    protocol: TCP
    targetPort: 3443
  selector:
    app.kubernetes.io/instance: gitops-ingress
    app.kubernetes.io/name: gitops-ingress-controller
  sessionAffinity: None
  type: NodePort
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: gitops-ingress-controller
    app.kubernetes.io/instance: gitops-ingress-controller
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/component: controller
  name: gitops-ingress-controller
  namespace: gitops
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "15"
    deployment.microfocus.com/default-replica-count: "2"
    deployment.microfocus.com/runlevel: STANDBY
    deployment.microfocus.com/simple-update: ignore
  generation: 1
  labels:
    app.kubernetes.io/instance: gitops-ingress
    app.kubernetes.io/name: gitops-ingress-controller
  name: gitops-ingress-controller
  namespace: gitops
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/instance: gitops-ingress
      app.kubernetes.io/name: gitops-ingress-controller
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: gitops-ingress
        app.kubernetes.io/name: gitops-ingress-controller
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - gitops-ingress-controller
              topologyKey: kubernetes.io/hostname
            weight: 100
      containers:
      - args:
        - /nginx-ingress-controller
        - --default-ssl-certificate=core/nginx-default-secret
        - --v=0
        - --configmap=core/portal-ingress-controller-conf
        - --watch-namespace=core
        - --annotations-prefix=ingress.kubernetes.io
        - --enable-ssl-chain-completion=false
        - --http-port=8080
        - --https-port=8443
        - --update-status=false
        - --ingress-class=nginx
        - --metrics-per-host=false
        env:
        - name: ACCESS_LOG_SIZE
          value: 10M
        - name: ACCESS_LOG_ROTATE
          value: "5"
        - name: ERROR_LOG_SIZE
          value: 10M
        - name: ERROR_LOG_ROTATE
          value: "5"
        - name: NGINX_CONFIG
          value: portal-ingress-controller-conf
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CONTAINER_NAME
          value: nginx-ingress-lb
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: SYSTEM_USER_ID
          value: "1999"
        - name: CLIENT_CERT_AUTH_PORT
          value: "8444"
        - name: LOG4J_FORMAT_MSG_NO_LOOKUPS
          value: "true"
        - name: SSL_CLIENT_CERTS
          value: pki-auth-ca-certificates
        - name: SSL_VERIFY_DEPTH
          value: "2"
        - name: CLIENT_CERT_HEADER
          value: IDM_CERTIFICATE
        - name: SSL_CERT_NAME
          value: nginx-default-secret
        - name: CLIENT_CERT_AUTH_INGRESS_HOST
          value: itom-idm-svc
        - name: EXTERNAL_ACCESS_HOST
          value: _
        image: nginx/nginx-ingress:2.4.1
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: nginx-ingress-lb
        resources:
          limits:
            cpu: 1500m
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 200Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1999
        runAsGroup: 1999
        runAsUser: 1999
        supplementalGroups:
        - 1999
      serviceAccount: gitops-ingress-controller
      serviceAccountName: gitops-ingress-controller
      terminationGracePeriodSeconds: 30


'''
EOT
'''

#---
#apiVersion: networking.k8s.io/v1
#kind: Ingress
#metadata:
#  name: gitops-ingress-controller
#  namespace: gitops
#  annotations:
#    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:713745958112:certificate/4210d4fc-eb24-458b-b2ee-4585f0597b25
#    alb.ingress.kubernetes.io/group.name: gitops-ingress
#    alb.ingress.kubernetes.io/inbound-cidrs: 0.0.0.0/0
#    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 3443}]'
#    alb.ingress.kubernetes.io/scheme: internet-facing
#    alb.ingress.kubernetes.io/security-groups: sg-07b50b1828b7e5f53,sg-038defe967d41af3d,sg-05a1424bec076e55c,sg-0495853efd8389edb
#    alb.ingress.kubernetes.io/success-codes: 200-399
#    alb.ingress.kubernetes.io/target-type: instance    
#    ingress.kubernetes.io/enable-cors: "true"
#    kubernetes.io/ingress.class: alb
#  finalizers:
#  - group.ingress.k8s.aws/aws-load-balancer-controller
#spec:
#  rules:
#  - http:
#      paths:
#      - backend:
#          service:
#            name: gitops-ingress-svc
#            port:
#              number: 3031
#        path: /*
#        pathType: ImplementationSpecific

#---
#apiVersion: v1
#kind: Namespace
#metadata:
#  name: gitops
#  labels:
#    app.kubernetes.io/name: gitops
#    app.kubernetes.io/instance: gitops

---
# Source: ingress-nginx/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/name: gitops-ingress-controller
    app.kubernetes.io/instance: gitops-ingress-controller
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/component: controller
  name: gitops-ingress-controller
  namespace: gitops
---
# Source: ingress-nginx/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitops-nginx-ingress
  namespace: gitops
data:
---
# Source: ingress-nginx/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
  name: gitops-nginx-ingress
  namespace: gitops
rules:
  - apiGroups:
      - ''
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ''
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
# Source: ingress-nginx/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
  name: gitops-nginx-ingress
  namespace: gitops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gitops-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: gitops-nginx-ingress
    namespace: gitops
---
# Source: ingress-nginx/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitops-nginx-ingress
  namespace: gitops
rules:
  - apiGroups:
      - ''
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ''
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - services
    verbs:
      - get
      - list
      - update
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io   # k8s 1.14+
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ''
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader-nginx
    verbs:
      - get
      - update
  - apiGroups:
      - ''
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ''
    resources:
      - endpoints
    verbs:
      - create
      - get
      - update
  - apiGroups:
      - ''
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: ingress-nginx/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitops-nginx-ingress
  namespace: gitops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitops-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: gitops-nginx-ingress
    namespace: gitops
---
# Source: ingress-nginx/templates/controller-service-webhook.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitops-nginx-ingress-controller-admission
  namespace: gitops
spec:
  type: ClusterIP
  ports:
    - name: https-webhook
      port: 443
      targetPort: webhook
  selector:
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/component: controller
---
# Source: ingress-nginx/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: '60'
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: 'true'
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitops-nginx-ingress-controller
  namespace: gitops
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/component: controller
---
# Source: ingress-nginx/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitops-nginx-ingress-controller
  namespace: gitops
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: gitops-nginx-ingress
      app.kubernetes.io/instance: gitops-nginx-ingress
      app.kubernetes.io/component: controller
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: gitops-nginx-ingress
        app.kubernetes.io/instance: gitops-nginx-ingress
        app.kubernetes.io/component: controller
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.32.0
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --publish-service=gitops/gitops-nginx-ingress-controller
            - --election-id=ingress-controller-leader
            - --ingress-class=nginx
            - --configmap=gitops/gitops-nginx-ingress-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
          securityContext:
            capabilities:
              drop:
                - ALL
              add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          livenessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: webhook
              containerPort: 8443
              protocol: TCP
          volumeMounts:
            - name: webhook-cert
              mountPath: /usr/local/certificates/
              readOnly: true
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
      serviceAccountName: gitops-nginx-ingress
      terminationGracePeriodSeconds: 300
      volumes:
        - name: webhook-cert
          secret:
            secretName: gitops-nginx-ingress-admission
---
# Source: ingress-nginx/templates/admission-webhooks/validating-webhook.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  name: gitops-nginx-ingress-admission
  namespace: gitops
webhooks:
  - name: validate.nginx.ingress.kubernetes.io
    rules:
      - apiGroups:
          - extensions
          - networking.k8s.io
        apiVersions:
          - v1beta1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ingresses
    failurePolicy: Fail
    clientConfig:
      service:
        namespace: gitops
        name: gitops-nginx-ingress-controller-admission
        path: /extensions/v1beta1/ingresses
---
# Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gitops-nginx-ingress-admission
  annotations:
    helm.sh/hook: pre-install,pre-upgrade,post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  namespace: gitops
rules:
  - apiGroups:
      - admissionregistration.k8s.io
    resources:
      - validatingwebhookconfigurations
    verbs:
      - get
      - update
---
# Source: ingress-nginx/templates/admission-webhooks/job-patch/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gitops-nginx-ingress-admission
  annotations:
    helm.sh/hook: pre-install,pre-upgrade,post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  namespace: gitops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gitops-nginx-ingress-admission
subjects:
  - kind: ServiceAccount
    name: gitops-nginx-ingress-admission
    namespace: gitops
---
# Source: ingress-nginx/templates/admission-webhooks/job-patch/job-createSecret.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitops-nginx-ingress-admission-create
  annotations:
    helm.sh/hook: pre-install,pre-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  namespace: gitops
spec:
  template:
    metadata:
      name: gitops-nginx-ingress-admission-create
      labels:
        helm.sh/chart: ingress-nginx-2.0.3
        app.kubernetes.io/name: gitops-nginx-ingress
        app.kubernetes.io/instance: gitops-nginx-ingress
        app.kubernetes.io/version: 0.32.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: create
          image: jettech/kube-webhook-certgen:v1.2.0
          imagePullPolicy: IfNotPresent
          args:
            - create
            - --host=gitops-nginx-ingress-controller-admission,gitops-nginx-ingress-controller-admission.gitops.svc
            - --namespace=gitops
            - --secret-name=gitops-nginx-ingress-admission
      restartPolicy: OnFailure
      serviceAccountName: gitops-nginx-ingress-admission
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: ingress-nginx/templates/admission-webhooks/job-patch/job-patchWebhook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitops-nginx-ingress-admission-patch
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  namespace: gitops
spec:
  template:
    metadata:
      name: gitops-nginx-ingress-admission-patch
      labels:
        helm.sh/chart: ingress-nginx-2.0.3
        app.kubernetes.io/name: gitops-nginx-ingress
        app.kubernetes.io/instance: gitops-nginx-ingress
        app.kubernetes.io/version: 0.32.0
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: admission-webhook
    spec:
      containers:
        - name: patch
          image: jettech/kube-webhook-certgen:v1.2.0
          imagePullPolicy:
          args:
            - patch
            - --webhook-name=gitops-nginx-ingress-admission
            - --namespace=gitops
            - --patch-mutating=false
            - --secret-name=gitops-nginx-ingress-admission
            - --patch-failure-policy=Fail
      restartPolicy: OnFailure
      serviceAccountName: gitops-nginx-ingress-admission
      securityContext:
        runAsNonRoot: true
        runAsUser: 2000
---
# Source: ingress-nginx/templates/admission-webhooks/job-patch/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitops-nginx-ingress-admission
  annotations:
    helm.sh/hook: pre-install,pre-upgrade,post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  namespace: gitops
rules:
  - apiGroups:
      - ''
    resources:
      - secrets
    verbs:
      - get
      - create
---
# Source: ingress-nginx/templates/admission-webhooks/job-patch/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitops-nginx-ingress-admission
  annotations:
    helm.sh/hook: pre-install,pre-upgrade,post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  namespace: gitops
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitops-nginx-ingress-admission
subjects:
  - kind: ServiceAccount
    name: gitops-nginx-ingress-admission
    namespace: gitops
---
# Source: ingress-nginx/templates/admission-webhooks/job-patch/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitops-nginx-ingress-admission
  annotations:
    helm.sh/hook: pre-install,pre-upgrade,post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
  labels:
    helm.sh/chart: ingress-nginx-2.0.3
    app.kubernetes.io/name: gitops-nginx-ingress
    app.kubernetes.io/instance: gitops-nginx-ingress
    app.kubernetes.io/version: 0.32.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: admission-webhook
  namespace: gitops